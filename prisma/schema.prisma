generator erd {
  provider = "prisma-erd-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Hostel {
  id              String               @id @default(uuid())
  name            String
  description     String?
  address         String
  manager         String
  email           String
  phone           String
  ghCard          String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  isVerified      Boolean              @default(false)
  delFlag         Boolean              @default(false)
  state           HostelState          @default(UNPUBLISHED)
  location        Location
  logoKey         String?
  logoUrl         String?
  Amenities       Amenities[]
  CalendarYear    CalendarYear[]
  historyResident HistoricalResident[]
  HostelImages    HostelImages[]
  resident        Resident[]
  Rooms           Room[]
  Staffs          Staff[]
  User            User[]
}

model Room {
  id                   String               @id @default(uuid())
  number               String
  block                String?
  floor                String?
  maxCap               Int
  hostelId             String
  price                Float
  description          String
  type                 RoomType
  status               RoomStatus
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  delFlag              Boolean              @default(false)
  gender               RoomGender
  currentResidentCount Int                  @default(0)
  HistoricalResident   HistoricalResident[]
  Payments             Payment[]
  Resident             Resident[]
  hostel               Hostel               @relation(fields: [hostelId], references: [id], onDelete: Cascade)
  RoomImage            RoomImage[]
  Amenities            Amenities[]          @relation("RoomAmenities")
}

model Staff {
  id                String        @id @default(uuid())
  hostelId          String
  firstName         String
  middleName        String?
  lastName          String
  dateOfBirth       DateTime
  nationality       String
  gender            Gender
  maritalStatus     MaritalStatus
  ghanaCardNumber   String
  phoneNumber       String
  religion          Religion
  email             String        @unique
  residence         String
  block             String
  dateOfAppointment DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  passportUrl       String
  passportKey       String
  delFlag           Boolean       @default(false)
  role              String
  qualification     String
  hostel            Hostel        @relation(fields: [hostelId], references: [id], onDelete: Cascade)
  type              StaffType     @default(OTHERS)
}

model Amenities {
  id        String   @id @default(uuid())
  name      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hostelId  String
  hostel    Hostel   @relation(fields: [hostelId], references: [id], onDelete: Cascade)
  rooms     Room[]   @relation("RoomAmenities")
}

model Resident {
  id                    String       @id @default(uuid())
  name                  String
  studentId             String
  course                String
  phone                 String
  email                 String       @unique
  emergencyContactName  String
  emergencyContactPhone String
  relationship          String
  roomId                String?
  gender                Gender
  roomAssigned          Boolean      @default(false)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  amountPaid            Float        @default(0)
  balanceOwed           Float?
  roomPrice             Float?
  delFlag               Boolean      @default(false)
  calendarYearId        String
  hostelId              String?
  payments              Payment[]
  CalendarYear          CalendarYear @relation(fields: [calendarYearId], references: [id])
  Hostel                Hostel?      @relation(fields: [hostelId], references: [id])
  room                  Room?        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  Visitor               Visitor[]
  accessCode            String?
}

model Payment {
  id                   String              @id @default(uuid())
  amount               Float
  date                 DateTime            @default(now())
  residentId           String?
  status               String?
  roomId               String?
  reference            String              @unique
  method               String?
  updatedAt            DateTime            @updatedAt
  delFlag              Boolean             @default(false)
  calendarYearId       String
  historicalResidentId String?
  CalendarYear         CalendarYear        @relation(fields: [calendarYearId], references: [id])
  HistoricalResident   HistoricalResident? @relation(fields: [historicalResidentId], references: [id])
  resident             Resident?           @relation(fields: [residentId], references: [id])
  room                 Room?               @relation(fields: [roomId], references: [id])
}

model Visitor {
  id         String        @id @default(uuid())
  name       String
  email      String
  phone      String
  residentId String
  timeIn     DateTime      @default(now())
  timeOut    DateTime?
  status     VisitorStatus
  updatedAt  DateTime      @updatedAt
  resident   Resident      @relation(fields: [residentId], references: [id], onDelete: Cascade)
}

model User {
  id              String   @id @default(uuid())
  name            String
  email           String
  password        String
  phoneNumber     String
  role            UserRole
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  imageUrl        String
  imageKey        String
  delFlag         Boolean  @default(false)
  hostelId        String?
  changedPassword Boolean  @default(false)
  hostel          Hostel?  @relation(fields: [hostelId], references: [id])
  leaves          Leave[]
}

model Leave {
  id          String      @id @default(uuid())
  userId      String
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      LeaveStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  delFlag     Boolean     @default(false)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoomImage {
  id        String   @id @default(uuid())
  roomId    String
  imageUrl  String
  imageKey  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  delFlag   Boolean  @default(false)
  room      Room     @relation(fields: [roomId], references: [id])
}

model CalendarYear {
  id                 String               @id @default(uuid())
  name               String               @unique
  startDate          DateTime
  endDate            DateTime?
  isActive           Boolean              @default(false)
  hostelId           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  hostel             Hostel               @relation(fields: [hostelId], references: [id])
  HistoricalResident HistoricalResident[]
  Payments           Payment[]
  Residents          Resident[]
}

model HistoricalResident {
  id             String       @id @default(uuid())
  residentId     String
  roomId         String
  calendarYearId String
  amountPaid     Float
  roomPrice      Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  hostelId       String?
  residentCourse String
  residentEmail  String
  residentName   String
  residentPhone  String
  CalendarYear   CalendarYear @relation(fields: [calendarYearId], references: [id])
  Hostel         Hostel?      @relation(fields: [hostelId], references: [id])
  room           Room         @relation(fields: [roomId], references: [id])
  payments       Payment[]
}

model HostelImages {
  id        String   @id @default(uuid())
  hostelId  String
  imageUrl  String
  imageKey  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  delFlag   Boolean  @default(false)
  hostel    Hostel   @relation(fields: [hostelId], references: [id])
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
}

enum VisitorStatus {
  ACTIVE
  CHECKED_OUT
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum Location {
  AHAFO
  ASHANTI
  BONO
  BONO_EAST
  CENTRAL
  EASTERN
  GREATER_ACCRA
  NORTH_EAST
  NORTHERN
  OTI
  SAVANNAH
  UPPER_EAST
  UPPER_WEST
  VOLTA
  WESTERN
  WESTERN_NORTH
}

enum Religion {
  CHRISTIAN
  MUSLIM
  TRADITIONALIST
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum RoomType {
  SINGLE
  DOUBLE
  SUITE
  QUAD
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum paymentMethod {
  CASH
  CARD
  BANK
  MOMO
  USSD
  QR_CODE
  VISA
  MASTER_CARD
  ONLINE
}

enum StaffStatus {
  ACTIVE
  INACTIVE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum RoomGender {
  MALE
  FEMALE
  MIX
}

enum HostelState {
  PUBLISHED
  UNPUBLISHED
}

enum StaffType {
  ADMIN
  OTHERS
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
