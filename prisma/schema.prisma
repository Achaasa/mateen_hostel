generator erd {
  provider = "prisma-erd-generator"
  // The directory where the ERD will be generated
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hostel {
  id          String      @id @default(uuid())
  name        String
  description String?
  address     String
  location    String
  manager     String
  email       String      @unique
  phone       String
  imageKey    String
  imageUrl    String
  ghCard      String
  Rooms       Room[]
  Staffs      Staff[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isVerifeid  Boolean     @default(false)
  delFlag     Boolean     @default(false)
  Amenities   Amenities[]
  User        User[]
}

model Room {
  id     String @id @default(uuid())
  number String
  block  String?
  floor  String?
  maxCap Int

  hostel      Hostel      @relation(fields: [hostelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hostelId    String
  Amenities   Amenities[] @relation("RoomAmenities")
  Resident    Resident[]
  price       Float
  description String
  type        RoomType
  status      RoomStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  delFlag   Boolean     @default(false)
  RoomImage RoomImage[]
}

model Staff {
  id                String        @id @default(uuid())
  role              StaffRole
  hostel            Hostel        @relation(fields: [hostelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hostelId          String
  firstName         String
  middleName        String?
  lastName          String
  dateOfBirth       DateTime
  nationality       String
  gender            Gender
  maritalStatus     MaritalStatus
  ghanaCardNumber   String
  phoneNumber       String
  religion          Religion
  email             String        @unique
  residence         String
  qualification     String
  block             String
  dateOfAppointment DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  passportUrl       String
  passportKey       String
  delFlag           Boolean       @default(false)
}

model Amenities {
  id        String   @id @default(uuid())
  name      String
  price     Float
  rooms     Room[]   @relation("RoomAmenities")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hostelId  String
  hostel    Hostel   @relation(fields: [hostelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Resident {
  id                    String @id @default(uuid())
  name                  String
  studentId             String
  course                String
  phone                 String
  email                 String @unique
  emergencyContactName  String
  emergencyContactPhone String
  relationship          String //relationship with emergency contact

  room         Room      @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId       String
  payments     Payment[]
  Visitor      Visitor[]
  gender       Gender
  roomAssigned Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  //tracking payments 
  amountPaid   Float     @default(0) // Total amount paid so far
  balanceOwed  Float? // Remaining balance, calculated in logic
  roomPrice    Float?
  delFlag      Boolean   @default(false)
}

model Payment {
  id         String   @id @default(uuid())
  amount     Float
  date       DateTime @default(now())
  resident   Resident @relation(fields: [residentId], references: [id])
  residentId String
  status     String?
  roomId     String?
  reference  String   @unique // Paystack payment reference
  method     String?
  updatedAt  DateTime @updatedAt
  delFlag    Boolean  @default(false)
}

model Visitor {
  id         String        @id @default(uuid())
  name       String
  email      String
  phone      String
  resident   Resident      @relation(fields: [residentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  residentId String
  timeIn     DateTime      @default(now())
  timeOut    DateTime?
  status     VisitorStatus
  updatedAt  DateTime      @updatedAt
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  phoneNumber String
  role        UserRole
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageUrl    String
  imageKey    String
  delFlag     Boolean  @default(false)
  hostelId    String?
  hostel      Hostel?  @relation(fields: [hostelId], references: [id])
}

model RoomImage {
  id        String   @id @default(uuid())
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  imageUrl  String
  imageKey  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  delFlag   Boolean  @default(false)
}

enum StaffRole {
  HOSTEL_MANAGER
  WARDEN
  CHIEF_WADEN
}

enum StaffQulification {
  BECE
  WASCE
  TVET
  BSC
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
}

enum VisitorStatus {
  ACTIVE
  CHECKED_OUT
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum Location {
  KUMASI
  ACCRA
  SUNYANI
}

enum Religion {
  CHRISTIAN
  MUSLIM
  TRADITIONALIST
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum RoomType {
  SINGLE
  DOUBLE
  SUITE
  QUAD
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum paymentMethod {
  CASH
  CARD
  BANK
  MOMO
  USSD
  QR_CODE
  VISA
  MASTER_CARD
  ONLINE
}

enum StaffStatus {
  ACTIVE
  INACTIVE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}